// FinanceIQ - Gestion Session et Verrouillage
// Auto-verrouillage apr√®s 5 min d'inactivit√© selon sp√©cifications

import { encryptWithPin, decryptWithPin, generatePinTestData, verifyPin } from './crypto'

// Type pour les donn√©es chiffr√©es (dupliqu√© depuis crypto.ts)
interface EncryptedData {
  data: string
  iv: string
  salt: string
  version: number
}

/**
 * Configuration du syst√®me de verrouillage
 */
const LOCK_CONFIG = {
  // D√©lai d'inactivit√© avant verrouillage automatique (5 min selon specs)
  inactivityTimeout: 5 * 60 * 1000, // 5 minutes en ms
  
  // Cl√©s de stockage local
  storageKeys: {
    pinTest: 'financeiq_pin_test',
    sessionActive: 'financeiq_session_active',
    lastActivity: 'financeiq_last_activity'
  },
  
  // √âv√©nements √† surveiller pour d√©tecter l'activit√©
  activityEvents: [
    'mousedown', 'mousemove', 'keypress', 'scroll', 
    'touchstart', 'click', 'focus'
  ] as const
} as const

/**
 * √âtat de la session de s√©curit√©
 */
interface SecuritySession {
  isUnlocked: boolean
  lastActivity: number
  pinHash?: string
  autoLockTimer?: number
}

/**
 * Gestionnaire de session s√©curis√©e
 */
class SecurityManager {
  private session: SecuritySession = {
    isUnlocked: false,
    lastActivity: Date.now()
  }
  
  private activityListeners: (() => void)[] = []
  private onLockCallbacks: (() => void)[] = []

  /**
   * Initialise le gestionnaire de s√©curit√©
   */
  async initialize(): Promise<void> {
    // V√©rifier si un PIN existe d√©j√†
    const hasExistingPin = await this.hasStoredPin()
    
    if (hasExistingPin) {
      // PIN existe, session verrouill√©e par d√©faut
      this.session.isUnlocked = false
    } else {
      // Premi√®re utilisation, pas de PIN configur√©
      this.session.isUnlocked = true
    }

    // D√©marrer la surveillance d'activit√©
    this.startActivityMonitoring()
    
    // V√©rifier le verrouillage au chargement
    this.checkAutoLock()
  }

  /**
   * Configure un nouveau PIN (premi√®re utilisation)
   */
  async setupPin(pin: string): Promise<void> {
    try {
      // Valider le PIN
      if (!/^\d{4,6}$/.test(pin)) {
        throw new Error('PIN doit contenir 4 √† 6 chiffres')
      }

      // G√©n√©rer des donn√©es test chiffr√©es
      const testData = await generatePinTestData(pin)
      
      // Stocker les donn√©es test
      localStorage.setItem(
        LOCK_CONFIG.storageKeys.pinTest, 
        JSON.stringify(testData)
      )

      // D√©verrouiller la session
      this.session.isUnlocked = true
      this.session.lastActivity = Date.now()
      
      // D√©marrer le timer d'auto-verrouillage
      this.resetAutoLockTimer()
      
      console.log('‚úÖ PIN configur√© avec succ√®s')
    } catch (error) {
      throw new Error(`Erreur configuration PIN: ${error instanceof Error ? error.message : 'Inconnue'}`)
    }
  }

  /**
   * D√©verrouille la session avec un PIN
   */
  async unlock(pin: string): Promise<boolean> {
    try {
      const testDataJson = localStorage.getItem(LOCK_CONFIG.storageKeys.pinTest)
      
      if (!testDataJson) {
        throw new Error('Aucun PIN configur√©')
      }

      const testData: EncryptedData = JSON.parse(testDataJson)
      
      // V√©rifier le PIN
      const isValid = await verifyPin(pin, testData)
      
      if (isValid) {
        this.session.isUnlocked = true
        this.session.lastActivity = Date.now()
        this.resetAutoLockTimer()
        
        console.log('‚úÖ Session d√©verrouill√©e')
        return true
      } else {
        console.log('‚ùå PIN incorrect')
        return false
      }
    } catch (error) {
      console.error('Erreur d√©verrouillage:', error)
      return false
    }
  }

  /**
   * Verrouille imm√©diatement la session
   */
  lock(): void {
    this.session.isUnlocked = false
    this.clearAutoLockTimer()
    
    // Notifier les callbacks
    this.onLockCallbacks.forEach(callback => callback())
    
    console.log('üîí Session verrouill√©e')
  }

  /**
   * V√©rifie si la session est d√©verrouill√©e
   */
  isUnlocked(): boolean {
    return this.session.isUnlocked
  }

  /**
   * V√©rifie si un PIN est d√©j√† configur√©
   */
  async hasStoredPin(): Promise<boolean> {
    const testData = localStorage.getItem(LOCK_CONFIG.storageKeys.pinTest)
    return testData !== null
  }

  /**
   * Enregistre un callback appel√© lors du verrouillage
   */
  onLock(callback: () => void): void {
    this.onLockCallbacks.push(callback)
  }

  /**
   * Supprime tous les callbacks de verrouillage
   */
  clearLockCallbacks(): void {
    this.onLockCallbacks = []
  }

  /**
   * Reset complet - efface PIN et donn√©es
   */
  async resetComplete(): Promise<void> {
    // Effacer les donn√©es de s√©curit√©
    localStorage.removeItem(LOCK_CONFIG.storageKeys.pinTest)
    localStorage.removeItem(LOCK_CONFIG.storageKeys.sessionActive)
    localStorage.removeItem(LOCK_CONFIG.storageKeys.lastActivity)
    
    // R√©initialiser la session
    this.session = {
      isUnlocked: true, // Pas de PIN = d√©verrouill√©
      lastActivity: Date.now()
    }
    
    this.clearAutoLockTimer()
    
    console.log('üóëÔ∏è Reset s√©curit√© complet effectu√©')
  }

  /**
   * D√©marre la surveillance d'activit√© utilisateur
   */
  private startActivityMonitoring(): void {
    const updateActivity = () => {
      if (this.session.isUnlocked) {
        this.session.lastActivity = Date.now()
        this.resetAutoLockTimer()
      }
    }

    // Ajouter les listeners d'√©v√©nements
    LOCK_CONFIG.activityEvents.forEach(eventType => {
      const listener = () => updateActivity()
      document.addEventListener(eventType, listener, { passive: true })
      this.activityListeners.push(() => {
        document.removeEventListener(eventType, listener)
      })
    })
  }

  /**
   * Arr√™te la surveillance d'activit√©
   */
  private stopActivityMonitoring(): void {
    this.activityListeners.forEach(removeListener => removeListener())
    this.activityListeners = []
  }

  /**
   * Remet √† z√©ro le timer d'auto-verrouillage
   */
  private resetAutoLockTimer(): void {
    this.clearAutoLockTimer()
    
    if (this.session.isUnlocked) {
      this.session.autoLockTimer = window.setTimeout(() => {
        this.lock()
      }, LOCK_CONFIG.inactivityTimeout)
    }
  }

  /**
   * Efface le timer d'auto-verrouillage
   */
  private clearAutoLockTimer(): void {
    if (this.session.autoLockTimer) {
      clearTimeout(this.session.autoLockTimer)
      this.session.autoLockTimer = undefined
    }
  }

  /**
   * V√©rifie si la session doit √™tre verrouill√©e au chargement
   */
  private checkAutoLock(): void {
    const lastActivityStr = localStorage.getItem(LOCK_CONFIG.storageKeys.lastActivity)
    
    if (lastActivityStr) {
      const lastActivity = parseInt(lastActivityStr, 10)
      const timeSinceActivity = Date.now() - lastActivity
      
      if (timeSinceActivity > LOCK_CONFIG.inactivityTimeout) {
        // Trop de temps √©coul√©, verrouiller
        this.lock()
      }
    }
  }

  /**
   * Nettoyage lors de la fermeture
   */
  destroy(): void {
    this.stopActivityMonitoring()
    this.clearAutoLockTimer()
    this.clearLockCallbacks()
  }
}

// Instance singleton
export const securityManager = new SecurityManager()

/**
 * Hook React pour utiliser le gestionnaire de s√©curit√©
 */
export function useSecurityManager() {
  return {
    initialize: () => securityManager.initialize(),
    setupPin: (pin: string) => securityManager.setupPin(pin),
    unlock: (pin: string) => securityManager.unlock(pin),
    lock: () => securityManager.lock(),
    isUnlocked: () => securityManager.isUnlocked(),
    hasStoredPin: () => securityManager.hasStoredPin(),
    onLock: (callback: () => void) => securityManager.onLock(callback),
    resetComplete: () => securityManager.resetComplete()
  }
}

/**
 * Utilitaires pour tests
 */
export const SecurityUtils = {
  LOCK_CONFIG,
  SecurityManager
}
